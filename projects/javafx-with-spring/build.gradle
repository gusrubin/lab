plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.5.7'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.ben-manes.versions' version '0.53.0'
}

group = 'com.gusrubin.lab'
version = '1.0.0-SNAPSHOT'

springBoot {
    buildInfo()
}

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'net.rgielen:javafx-weaver-spring-boot-starter:2.0.1'
    implementation 'org.openjfx:javafx-controls:23.0.2'
    implementation 'org.openjfx:javafx-graphics:23.0.2'
    implementation 'org.openjfx:javafx-fxml:23.0.2'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    compileOnly 'com.google.inject:guice:7.0.0'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.wiremock:wiremock-standalone:3.13.1'
    implementation 'org.assertj:assertj-core:3.24.2'
}

javafx {
    version = "21.0.1"
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml']
}

application {
    // Define the main class for the application.
    mainClass = 'com.gusrubin.lab.javafxwithspring.infrastructure.adapter.in.gui.JavaFxApplication'

    applicationDefaultJvmArgs = ['--add-exports=javafx.graphics/com.sun.javafx.iio=ALL-UNNAMED',
                                 '--add-exports=javafx.graphics/com.sun.javafx.iio.common=ALL-UNNAMED',
                                 '--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
                                 '--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
    ]
}

tasks.register('gerarAtalho') {
    description = 'Gera um atalho .desktop para o aplicativo'

    // Diretório linux no build
    def linuxDir = layout.buildDirectory.dir("linux")

    // Arquivo desktop como provider
    def desktopFile = linuxDir.map { it.file("meuapp.desktop") }

    // Paths absolutos capturados em tempo de configuração
    def iconPath = layout.buildDirectory.file("resources/main/static/icon.png").get().asFile.toPath().toAbsolutePath().toString()
    def jarPath = layout.buildDirectory.file("libs/${project.name}-${project.version}.jar").get().asFile.toPath().toAbsolutePath().toString()


    doLast {
        // Cria o diretorio
        desktopFile.get().asFile.parentFile.mkdirs()

        // Conteúdo do atalho
        def conteudo = """[Desktop Entry]
Type=Application
Name=MeuApp JavaFX
Comment=Aplicativo Spring Boot JavaFX
Exec=java -jar '${jarPath}'
Icon=${iconPath}
Terminal=false
Categories=Development;Utility;
"""
        desktopFile.get().asFile.text = conteudo

        println "Atalho gerado em: ${desktopFile.get().asFile}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('build') {
    // println "Gerando atalho"
    finalizedBy tasks.named('gerarAtalho')
}

run {
    jvmArgs = ['--add-exports=javafx.graphics/com.sun.javafx.iio=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.javafx.iio.common=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
    ]
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(candidate.version) && !isNonStable(currentVersion)
    }
}

static boolean isNonStable(String version) {
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

